/**
 * Context Menu Handler
 * Akƒ±llƒ± context menu y√∂netimi
 */

class ContextMenuHandler {
    constructor() {
        this.isInitialized = false;
        this.contextMenuId = 'gemini-translate-context-menu';
        this.isEnabled = true;
        
        this.init();
    }

    /**
     * Context menu handler'ƒ± ba≈ülat
     */
    async init() {
        try {
            // Cross-browser compatibility layer y√ºkle
            await this.loadCompatibilityLayer();
            
            // Context menu'yu olu≈ütur
            await this.createContextMenu();
            
            // Event listener'larƒ± ekle
            this.attachEventListeners();
            
            this.isInitialized = true;
            console.log('Context menu handler ba≈ülatƒ±ldƒ±');
            
        } catch (error) {
            console.error('Context menu handler ba≈ülatma hatasƒ±:', error);
        }
    }

    /**
     * Compatibility layer y√ºkle
     */
    async loadCompatibilityLayer() {
        if (!window.compatibilityLayer) {
            // Browser detection
            const isFirefox = typeof browser !== 'undefined' && browser.runtime;
            const isChrome = typeof chrome !== 'undefined' && chrome.runtime;
            
            // API se√ßimi - Chrome √∂ncelikli, Firefox fallback
            const api = isChrome ? chrome : (isFirefox ? browser : chrome);
            
            window.compatibilityLayer = {
                runtime: api.runtime,
                storage: api.storage,
                contextMenus: api.contextMenus,
                tabs: api.tabs,
                scripting: api.scripting,
                isChrome: isChrome,
                isFirefox: isFirefox
            };
        }
    }

    /**
     * Context menu'yu olu≈ütur
     */
    async createContextMenu() {
        try {
            const compatibilityLayer = window.compatibilityLayer || chrome;
            
            // √ñnce mevcut menu'yu temizle
            await this.removeExistingMenus();
            
            // Ana context menu'yu olu≈ütur
            await compatibilityLayer.contextMenus.create({
                id: this.contextMenuId,
                title: 'üî§ Gemini ile √áevir',
                contexts: ['selection'],
                visible: true
            });
            
            // Alt men√ºleri olu≈ütur
            await this.createSubMenus();
            
        } catch (error) {
            console.error('Context menu olu≈üturma hatasƒ±:', error);
        }
    }

    /**
     * Alt men√ºleri olu≈ütur
     */
    async createSubMenus() {
        const compatibilityLayer = window.compatibilityLayer || chrome;
        
        // Pop√ºler diller i√ßin alt men√ºler
        const popularLanguages = [
            { code: 'tr', name: 'T√ºrk√ße', flag: 'üáπüá∑' },
            { code: 'en', name: 'English', flag: 'üá∫üá∏' },
            { code: 'es', name: 'Espa√±ol', flag: 'üá™üá∏' },
            { code: 'fr', name: 'Fran√ßais', flag: 'üá´üá∑' },
            { code: 'de', name: 'Deutsch', flag: 'üá©üá™' },
            { code: 'it', name: 'Italiano', flag: 'üáÆüáπ' },
            { code: 'pt', name: 'Portugu√™s', flag: 'üáµüáπ' },
            { code: 'ru', name: '–†—É—Å—Å–∫–∏–π', flag: 'üá∑üá∫' },
            { code: 'ja', name: 'Êó•Êú¨Ë™û', flag: 'üáØüáµ' },
            { code: 'ko', name: 'ÌïúÍµ≠Ïñ¥', flag: 'üá∞üá∑' },
            { code: 'zh', name: '‰∏≠Êñá', flag: 'üá®üá≥' },
            { code: 'ar', name: 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©', flag: 'üá∏üá¶' }
        ];
        
        // Dil se√ßenekleri men√ºs√º
        await compatibilityLayer.contextMenus.create({
            id: 'gemini-translate-languages',
            title: 'Dil Se√ßenekleri',
            contexts: ['selection'],
            parentId: this.contextMenuId
        });
        
        // Her dil i√ßin alt men√º olu≈ütur
        for (const lang of popularLanguages) {
            await compatibilityLayer.contextMenus.create({
                id: `gemini-translate-${lang.code}`,
                title: `${lang.flag} ${lang.name}`,
                contexts: ['selection'],
                parentId: 'gemini-translate-languages'
            });
        }
        
        // Ayƒ±rƒ±cƒ±
        await compatibilityLayer.contextMenus.create({
            id: 'gemini-translate-separator-1',
            type: 'separator',
            contexts: ['selection'],
            parentId: this.contextMenuId
        });
        
        // Dil tespit et
        await compatibilityLayer.contextMenus.create({
            id: 'gemini-detect-language',
            title: 'ü§ñ Dil Tespit Et',
            contexts: ['selection'],
            parentId: this.contextMenuId
        });
        
        // Hƒ±zlƒ± √ßeviri (varsayƒ±lan dil)
        await compatibilityLayer.contextMenus.create({
            id: 'gemini-quick-translate',
            title: '‚ö° Hƒ±zlƒ± √áeviri',
            contexts: ['selection'],
            parentId: this.contextMenuId
        });
        
        // Ayƒ±rƒ±cƒ±
        await compatibilityLayer.contextMenus.create({
            id: 'gemini-translate-separator-2',
            type: 'separator',
            contexts: ['selection'],
            parentId: this.contextMenuId
        });
        
        // Ayarlar
        await compatibilityLayer.contextMenus.create({
            id: 'gemini-open-settings',
            title: '‚öôÔ∏è Ayarlar',
            contexts: ['selection'],
            parentId: this.contextMenuId
        });
        
        // Yardƒ±m
        await compatibilityLayer.contextMenus.create({
            id: 'gemini-open-help',
            title: '‚ùì Yardƒ±m',
            contexts: ['selection'],
            parentId: this.contextMenuId
        });
    }

    /**
     * Mevcut men√ºleri kaldƒ±r
     */
    async removeExistingMenus() {
        try {
            const compatibilityLayer = window.compatibilityLayer || chrome;
            await compatibilityLayer.contextMenus.removeAll();
        } catch (error) {
            console.error('Mevcut men√ºleri kaldƒ±rma hatasƒ±:', error);
        }
    }

    /**
     * Event listener'larƒ± ekle
     */
    attachEventListeners() {
        const compatibilityLayer = window.compatibilityLayer || chrome;
        
        // Context menu click event'i
        compatibilityLayer.contextMenus.onClicked.addListener((info, tab) => {
            this.handleContextMenuClick(info, tab);
        });
        
        // Context menu g√∂r√ºn√ºrl√ºk kontrol√º
        compatibilityLayer.contextMenus.onShown.addListener((info, tab) => {
            this.handleContextMenuShown(info, tab);
        });
    }

    /**
     * Context menu click i≈üleyici
     */
    async handleContextMenuClick(info, tab) {
        try {
            const menuItemId = info.menuItemId;
            const selectedText = info.selectionText;
            
            if (!selectedText || selectedText.trim().length === 0) {
                return;
            }
            
            // Menu item'a g√∂re i≈ülem yap
            if (menuItemId === 'gemini-quick-translate') {
                await this.quickTranslate(selectedText, tab);
            } else if (menuItemId.startsWith('gemini-translate-') && menuItemId !== 'gemini-translate-languages') {
                const languageCode = menuItemId.replace('gemini-translate-', '');
                await this.translateToLanguage(selectedText, languageCode, tab);
            } else if (menuItemId === 'gemini-detect-language') {
                await this.detectLanguage(selectedText, tab);
            } else if (menuItemId === 'gemini-open-settings') {
                await this.openSettings(tab);
            } else if (menuItemId === 'gemini-open-help') {
                await this.openHelp(tab);
            }
            
        } catch (error) {
            console.error('Context menu click hatasƒ±:', error);
        }
    }

    /**
     * Context menu g√∂sterim kontrol√º
     */
    async handleContextMenuShown(info, tab) {
        try {
            const selectedText = info.selectionText;
            
            // Se√ßim yoksa men√ºy√º gizle
            if (!selectedText || selectedText.trim().length < 2) {
                await this.hideContextMenu();
                return;
            }
            
            // Men√ºy√º g√∂ster
            await this.showContextMenu();
            
        } catch (error) {
            console.error('Context menu g√∂sterim hatasƒ±:', error);
        }
    }

    /**
     * Hƒ±zlƒ± √ßeviri
     */
    async quickTranslate(text, tab) {
        try {
            // Varsayƒ±lan hedef dili al
            const settings = await this.getSettings();
            const targetLanguage = settings.targetLanguage || 'tr';
            
            // √áeviri i≈ülemini ba≈ülat
            await this.translateToLanguage(text, targetLanguage, tab);
            
        } catch (error) {
            console.error('Hƒ±zlƒ± √ßeviri hatasƒ±:', error);
        }
    }

    /**
     * Belirli dile √ßevir
     */
    async translateToLanguage(text, targetLanguage, tab) {
        try {
            // Background script'e √ßeviri isteƒüi g√∂nder
            const response = await this.sendMessageToBackground({
                type: APP_CONSTANTS.MESSAGE_TYPES.TRANSLATE_TEXT,
                data: { 
                    text: text,
                    targetLanguage: targetLanguage
                }
            });
            
            if (response.success) {
                // √áeviri sonucunu g√∂ster
                await this.showTranslationResult(response.data, tab);
            } else {
                console.error('√áeviri hatasƒ±:', response.error);
                await this.showError('√áeviri ba≈üarƒ±sƒ±z oldu', tab);
            }
            
        } catch (error) {
            console.error('Dil √ßevirisi hatasƒ±:', error);
            await this.showError('√áeviri i≈ülemi ba≈üarƒ±sƒ±z oldu', tab);
        }
    }

    /**
     * Dil tespit et
     */
    async detectLanguage(text, tab) {
        try {
            // Background script'e dil tespiti isteƒüi g√∂nder
            const response = await this.sendMessageToBackground({
                type: APP_CONSTANTS.MESSAGE_TYPES.DETECT_LANGUAGE,
                data: { text: text }
            });
            
            if (response.success) {
                const language = response.data;
                await this.showLanguageDetectionResult(language, tab);
            } else {
                console.error('Dil tespiti hatasƒ±:', response.error);
                await this.showError('Dil tespiti ba≈üarƒ±sƒ±z oldu', tab);
            }
            
        } catch (error) {
            console.error('Dil tespiti hatasƒ±:', error);
            await this.showError('Dil tespiti i≈ülemi ba≈üarƒ±sƒ±z oldu', tab);
        }
    }

    /**
     * √áeviri sonucunu g√∂ster
     */
    async showTranslationResult(translation, tab) {
        try {
            // Content script'e √ßeviri sonucunu g√∂ster
            await this.sendMessageToTab(tab.id, {
                type: 'SHOW_TRANSLATION_RESULT',
                data: translation
            });
            
        } catch (error) {
            console.error('√áeviri sonucu g√∂sterme hatasƒ±:', error);
        }
    }

    /**
     * Dil tespiti sonucunu g√∂ster
     */
    async showLanguageDetectionResult(language, tab) {
        try {
            // Content script'e dil tespiti sonucunu g√∂ster
            await this.sendMessageToTab(tab.id, {
                type: 'SHOW_LANGUAGE_DETECTION_RESULT',
                data: language
            });
            
        } catch (error) {
            console.error('Dil tespiti sonucu g√∂sterme hatasƒ±:', error);
        }
    }

    /**
     * Hata g√∂ster
     */
    async showError(message, tab) {
        try {
            // Content script'e hata g√∂ster
            await this.sendMessageToTab(tab.id, {
                type: 'SHOW_ERROR',
                data: { message: message }
            });
            
        } catch (error) {
            console.error('Hata g√∂sterme hatasƒ±:', error);
        }
    }

    /**
     * Ayarlarƒ± a√ß
     */
    async openSettings(tab) {
        try {
            const compatibilityLayer = window.compatibilityLayer || chrome;
            
            if (compatibilityLayer.runtime.openOptionsPage) {
                compatibilityLayer.runtime.openOptionsPage();
            } else {
                // Fallback: yeni tab'da a√ß
                await compatibilityLayer.tabs.create({
                    url: compatibilityLayer.runtime.getURL('options/options.html')
                });
            }
            
        } catch (error) {
            console.error('Ayarlar a√ßma hatasƒ±:', error);
        }
    }

    /**
     * Yardƒ±m a√ß
     */
    async openHelp(tab) {
        try {
            const compatibilityLayer = window.compatibilityLayer || chrome;
            
            await compatibilityLayer.tabs.create({
                url: 'https://github.com/your-username/gemini-translate-extension'
            });
            
        } catch (error) {
            console.error('Yardƒ±m a√ßma hatasƒ±:', error);
        }
    }

    /**
     * Context menu'yu g√∂ster
     */
    async showContextMenu() {
        try {
            const compatibilityLayer = window.compatibilityLayer || chrome;
            
            await compatibilityLayer.contextMenus.update(this.contextMenuId, {
                visible: true
            });
            
        } catch (error) {
            console.error('Context menu g√∂sterme hatasƒ±:', error);
        }
    }

    /**
     * Context menu'yu gizle
     */
    async hideContextMenu() {
        try {
            const compatibilityLayer = window.compatibilityLayer || chrome;
            
            await compatibilityLayer.contextMenus.update(this.contextMenuId, {
                visible: false
            });
            
        } catch (error) {
            console.error('Context menu gizleme hatasƒ±:', error);
        }
    }

    /**
     * Ayarlarƒ± al
     */
    async getSettings() {
        try {
            const compatibilityLayer = window.compatibilityLayer || chrome;
            const result = await compatibilityLayer.storage.local.get([APP_CONSTANTS.STORAGE_KEYS.SETTINGS]);
            return result[APP_CONSTANTS.STORAGE_KEYS.SETTINGS] || APP_CONSTANTS.DEFAULT_SETTINGS;
        } catch (error) {
            console.error('Ayarlar alma hatasƒ±:', error);
            return APP_CONSTANTS.DEFAULT_SETTINGS;
        }
    }

    /**
     * Background script'e mesaj g√∂nder
     */
    async sendMessageToBackground(message) {
        try {
            const compatibilityLayer = window.compatibilityLayer || chrome;
            return await compatibilityLayer.runtime.sendMessage(message);
        } catch (error) {
            console.error('Background mesaj g√∂nderme hatasƒ±:', error);
            return { success: false, error: error.message };
        }
    }

    /**
     * Tab'a mesaj g√∂nder
     */
    async sendMessageToTab(tabId, message) {
        try {
            const compatibilityLayer = window.compatibilityLayer || chrome;
            return await compatibilityLayer.tabs.sendMessage(tabId, message);
        } catch (error) {
            console.error('Tab mesaj g√∂nderme hatasƒ±:', error);
            return { success: false, error: error.message };
        }
    }

    /**
     * Context menu handler'ƒ± etkinle≈ütir/devre dƒ±≈üƒ± bƒ±rak
     */
    setEnabled(enabled) {
        this.isEnabled = enabled;
        
        if (enabled) {
            this.showContextMenu();
        } else {
            this.hideContextMenu();
        }
    }

    /**
     * Context menu handler'ƒ± temizle
     */
    async destroy() {
        try {
            // Mevcut men√ºleri kaldƒ±r
            await this.removeExistingMenus();
            
            this.isInitialized = false;
            
        } catch (error) {
            console.error('Context menu handler temizleme hatasƒ±:', error);
        }
    }
}

// Export for different module systems
if (typeof module !== 'undefined' && module.exports) {
    module.exports = ContextMenuHandler;
}

if (typeof window !== 'undefined' && !window.ContextMenuHandler) {
    window.ContextMenuHandler = ContextMenuHandler;
}
